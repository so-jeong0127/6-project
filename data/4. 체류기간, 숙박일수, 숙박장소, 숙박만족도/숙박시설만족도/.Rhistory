library(ggplot2)
setwd("D:/workR")
text <- readLines("mis_document.txt", encoding='UTF-8') # Text File 마지막에 공백줄!
text
#'우리 말씀' 한글사전 로딩
buildDictionary(ext_dic = 'woorimalsam')
pal2 <- brewer.pal(8,'Dark2')      # 색상 팔레트 생성
noun <- sapply(text, extractNoun,USE.NAMES = F) # 명사 추출, 행 이름은 안 쓰겠다(USE.NAMES = F)
noun
#4. 추출된 단어(주로 명사)에 대한 빈도수 계산 및 시각화
noun2 <- unlist(noun)  # list -> vector
wordcount <- table(noun2)
sort.noun <- sort(wordcount, decreasing = T)[1:10]
sort.noun
sort.noun <- sort.noun[-1]
barplot(sort.noun, names.arg=names(sort.noun),
col='steelblue', main= '빈도수 높은 단어',
ylab='단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot(df,aes(x=df$noun2, y=df$Freq))+
geom_bar(stat='identity',
width = 0.7,
fill="steelblue")+
ggtitle('빈도수 높은 단어')+
theme(plot.title = element_text(size=25,
face='bold',
colour='steelblue',
hjust=0,
vjust=1))+
labs(x='명사', y='단어빈도수')+
geom_text(aes(label=df$Freq),hjust=0.3)+
coord_flip()
wordcloud(names(wordcount),        # 단어
freq=wordcount,          # 단어빈도
scale=c(6,0.7),           # 단어폰트 크기(최대, 최소)
min.freq = 3,              # 단어 최소 빈도 - 글씨 크기 파악 가능
random.order = F,          # 단어 출력 위치
rot.per = .1,               # 90도 회전 단어 비율
colors=pal2)                # 단어 색
#6. 전처리 과정 수행
#      6.1 불필요한 단어 삭제
#      6.2 생략된 단어를 사전에 등재
buildDictionary(ext_dic = 'woorimalsam',
user_dic = data.frame('정치', 'ncn'),    # 사전에 단어 추가
replace_usr_dic=T)
noun <- sapply(text, extractNoun, USE.NAMES = F)
noun2 <- unlist(noun)
# 6.1 불필요한 단어 삭제
noun2 <- noun2[nchar(noun2)>1]   # 한 글자 빼라
noun2 <- gsub('하지', '', noun2)  # '하지' ->'' 결국 없애라는 뜻/ 조사
noun2 <- gsub('때문', '', noun2)
wordcount <- table(noun2)
wordcount
# 애국가 형태소 분석- 사전 정보 -> 단어 추출 가능
library(KoNLP)
useSystemDic()
useSejongDic()
useNIADic()
# 2. 텍스트 데이터 가져오기
word_data <- readLines("애국가(가사).txt")
word_data
##2.
text4 <- readLines("ex_10-4.txt", encoding='UTF-8')
text4
text4 <- sapply(text4, extractNoun,USE.NAMES = F)
text4
text4
undata_steve <- unlist(text4)
undata_steve
word_table <- table(undata_steve)
word_table
undata2 <- undata[nchar(undata_steve)>=2]
undata2 <- undata_steve[nchar(undata_steve)>=2]
undata_steve <- undata_steve[nchar(undata_steve)>=2]
undata_steve
word_table2 <- table(undata_steve)
word_table2
sort(word_table2, decreasing = T)
wordcloud2(word_table2)
wordcloud2(word_table2,
color='random-light',
backgroundColor = 'black')
wordcloud2(word_table2, fontFamily = '맑은 고딕',
size=1.2, color='random-light',
backgroundColor = 'black', shape='star')
text1 <- readLines("ex_10-1.txt", encoding='UTF-8')
text2 <- readLines("ex_10-2.txt", encoding ='UTF-8')
text3 <- readLines("ex_10-3.txt", encoding='UTF-8')
pal2 <- brewer.pal(8,'Dark2')
noun1 <- sapply(text1, extractNoun, USE.NAMES = F)
noun2 <- sapply(text2, extractNoun, USE.NAMES = F)
noun3 <- sapply(text3, extractNoun, USE.NAMES = F)
undata_noun1 <- unlist(noun1)
undata_noun1
undata_noun2
noun2 <- sapply(text2, extractNoun, USE.NAMES = F)
undata_noun2 <- unlist(noun2)
undata_noun2
noun3 <- sapply(text3, extractNoun, USE.NAMES = F)
undata_noun3 <- unlist(noun3)
undata_noun3
word_table1 <- table(undata_noun1)
word_table1
undata_noun1 <- undata_noun1[nchar(undata_noun1)>=2]
undata_noun1
word_table1 <- table(undata_noun1)
word_table1
sort(word_table1, decreasing = T)
wordcloud2(word_table1)
undata_steve <- gsub('때문', '', undata_steve)
undata_steve <- gsub('뭔가','',undata_steve)
undata_steve <- gsub('10','', undata_steve)
undata_steve <- gsub('들이','', undata_steve)
word_table2 <- table(undata_steve)
wordcloud2(word_table2)
undata_steve <- gsub('그것','',undata_steve)
word_table2 <- table(undata_steve)
wordcloud2(word_table2)
library( tidyverse )
library( car )
str(Prestige)
str(Prestige)
head(Prestige)
newdata <- Prestige[ , c( 1:4 ) ]
head( newdata )
plot( newdata, pch = 16, col = 'blue',
main = 'Matrix Scatterplot')
model <- lm( income~education + prestige + women,
data = newdata )
model
coef( model )
fitted( model )
residuals( model )
fitted( model )
residuals( model )
deviance( model ) # 잔차
deviance( model ) / length( newdata$education ) # 평균 제곱 오차
summary( model )
newdata2 <- Prestige[,c(1:5)]
model2 <- lm(income~., data= newdata2)
summary(model2)
library( MASS )
model3 <- stepAIC( model2 )
summary(model3)
summary(model2)
summary(model3)
#     주어진 data로부터 어떤 범주를 예측하는 분야를
#     회귀와 구분하여 분류( classification )이라고 한다.
#
#     로지스틱 회귀도 기본적으로 회귀 기법이기 때문에
#     종속변수는 숫자로 표현되어야 한다.
#
#     예) YES와 NO는 1과 0로
#         setosa, versicolor, virginica는 1,2,3과 같이
#         숫자로 바꾼 후에 로지스틱 회귀 적용
#
iris.new <- iris.new
#     주어진 data로부터 어떤 범주를 예측하는 분야를
#     회귀와 구분하여 분류( classification )이라고 한다.
#
#     로지스틱 회귀도 기본적으로 회귀 기법이기 때문에
#     종속변수는 숫자로 표현되어야 한다.
#
#     예) YES와 NO는 1과 0로
#         setosa, versicolor, virginica는 1,2,3과 같이
#         숫자로 바꾼 후에 로지스틱 회귀 적용
#
iris.new <- iris
iris.new$Species <- as.integer( iris.new$Species )
head(iris.new)
iris_model <- glm( Species~., data = iris.new )
iris_model <- glm( Species~., data = iris.new )
iris_model
coef( iris_model )
summary( iris_model )
unknown <- data.frame( rbind( c(5.1,3.5,1.4,0.2) ) )
names(unknown) <- names(iris)[1:4]
unknown
pred <- predict(iris_model, unknown )
pred
round(pred, 0)
levels( iris$Species )[pred]
pred <- round(pred, 0)
levels( iris$Species )[pred]
## 숙박시설만족도-성별
library(gridExtra)
setwd('D:/work123/R_project/team/5. 관광만족도, 불만족요인/숙박시설만족도')
setwd('D:/6-project/data/4. 체류기간, 숙박일수, 숙박만족도/숙박시설만족도')
setwd('D:/6-project/data/4. 체류기간, 숙박일수, 숙박장소, 숙박만족도/숙박시설만족도')
hotel1 <- read.csv("숙박시설만족도-성별-시설상태.csv", header=T)
hotel2 <- read.csv("숙박시설만족도-성별-종사원친절도.csv", header=T)
hotel3 <- read.csv("숙박시설만족도-성별-시설이용편의성.csv", header=T)
hotel1.df <- melt( hotel1[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel2.df <- melt( hotel2[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel3.df <- melt( hotel3[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
library(reshape2)
library(ggplot2)
hotel1.df <- melt( hotel1[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel2.df <- melt( hotel2[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel3.df <- melt( hotel3[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
grid.arrange(
ggplot(hotel1.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족도-성별-시설상태")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel2.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족도-성별-종사원친절도")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel3.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족도-성별-시설이용편의성")+
theme(legend.title = element_blank(), legend.position = 'none'),
nrow=1
)
grid.arrange(
ggplot(hotel1.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족도/성별/시설상태")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel2.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족도/성별/종사원친절도")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel3.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족도/성별/시설이용편의성")+
theme(legend.title = element_blank(), legend.position = 'none'),
nrow=1
)
grid.arrange(
ggplot(hotel1.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/성별/시설상태")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel2.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/성별/종사원친절도")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel3.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/성별/시설이용편의성")+
theme(legend.title = element_blank(), legend.position = 'none'),
nrow=1
)
hotel1 <- read.csv("숙박시설만족도-국적별-시설상태.csv", header=T)
hotel2 <- read.csv("숙박시설만족도-국적별-종사원친절도.csv", header=T)
hotel3 <- read.csv("숙박시설만족도-국적별-시설이용편의성.csv", header=T)
hotel1.df <- melt( hotel1[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel2.df <- melt( hotel2[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel3.df <- melt( hotel3[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
grid.arrange(
ggplot(hotel1.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/국적별/시설상태")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel2.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/국적별/종사원친절도")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel3.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/국적별/시설이용편의성")+
theme(legend.title = element_blank(), legend.position = 'none'),
nrow=1
)
setwd('D:/6-project/data/4. 체류기간, 숙박일수, 숙박장소, 숙박만족도/숙박시설만족도')
hotel1 <- read.csv("숙박시설만족도-연령별-시설상태.csv", header=T)
hotel2 <- read.csv("숙박시설만족도-연령별-종사원친절도.csv", header=T)
hotel3 <- read.csv("숙박시설만족도-연령별-시설이용편의성.csv", header=T)
hotel1.df <- melt( hotel1[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel2.df <- melt( hotel2[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel3.df <- melt( hotel3[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
grid.arrange(
ggplot(hotel1.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/연령별/시설상태")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel2.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/연령별/종사원친절도")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel3.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/연령별/시설이용편의성")+
theme(legend.title = element_blank(), legend.position = 'none'),
nrow=1
)
hotel1 <- read.csv("숙박시설만족도-여행유형별-시설상태.csv", header=T)
hotel2 <- read.csv("숙박시설만족도-여행유형별-종사원친절도.csv", header=T)
hotel3 <- read.csv("숙박시설만족도-여행유형별-시설이용편의성.csv", header=T)
hotel1.df <- melt( hotel1[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel2.df <- melt( hotel2[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
hotel3.df <- melt( hotel3[, c("X","전혀그렇지않다", "그렇지않다","보통이다","그렇다","매우그렇다")], id = "X")
grid.arrange(
ggplot(hotel1.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/여행유형별/시설상태")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel2.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/여행유형별/종사원친절도")+
theme(legend.title = element_blank(), legend.position = 'none'),
ggplot(hotel3.df)+
geom_bar(aes(x = X, y=value, fill = variable),
position = "fill", stat = "identity" )+
ggtitle("숙박시설만족/여행유형별/시설이용편의성")+
theme(legend.title = element_blank(), legend.position = 'none'),
nrow=1
)
test <- iris[, 1:4 ]
pred <- predict( iris_model, test )
pred <- round( pred, 0 )
answer <-  as.integer( iris$Species )
pred == answer
pred <- predict( iris_model, test )
pred
pred <- round( pred, 0 )
pred
answer <-  as.integer( iris$Species )
pred == answer
acc <- mean( pred == answer )
acc
# 작성일 : 191217
# 제출일 : 191217
#
#
# 문1)
# trees 데이터셋에 대해 다음의 문제를 해결하는 R 코드를 작성하시오.
#
# (1) 나무 둘레(Girth)와 나무의 키(Height)로 나무의 볼륨을 예측하는 다중선형 회귀
# 모델을 만드시오.
#
df <- data.frame(trees)
df
res <- lm(Volume~., data = df)
res
model <- lm(Volume~., data = df)
model
coef(model)
summary(model)
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
# (Height)로 나무의 볼륨을 예측하시오.
#
df
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
# (Height)로 나무의 볼륨을 예측하시오.
#
df[,c(1,2)]
summary(model)
library(MASS)
stepAICed_model <- stepAIC(model)
summary(model)
predict(model, df[,c(1,2)] )
pred <- predict(model, df[,c(1,2)] )
pred <- predict(model, df[,c(1,2)] )
summary(model)
model <- lm(Volume~., data = df)
model
coef(model)
summary(model)
B0 <- coef(model)[1]
B1 <- coef(model)[2]
B2 <- coef(model)[3]
b0
B0
fitted(model)
residuals(model)
deviance(model)
nrow(model)
nrow(model)
nrow(df)
deviance(model) / length( nrow(df) )
summary(model)
df
plot(df, pch = 19, col = 'red')
pred <- predict(model, df[,c(1,2)] )
pred
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
# (Height)로 나무의 볼륨을 예측하시오.
#
GirthHeightTest <- trees[,c(1,2)]
pred <- predict(model, GirthHeightTest] )
pred <- predict(model, GirthHeightTest )
pred
Volume_pred <- predict(model, GirthHeightTest )
Volume_pred
trees$Volume == Volume_pred
Volume_pred <- predict(model, GirthHeightTest )
Volume_pred
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
# (Height)로 나무의 볼륨을 예측하시오.
#
tress
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
# (Height)로 나무의 볼륨을 예측하시오.
#
trees
trees$Volume #실제값
Volume_pred  #예측값
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
# (Height)로 나무의 볼륨을 예측하시오.
#
GirthHeightTest <- trees[,c(1,2)]
Volume_pred <- predict(model, GirthHeightTest )
Volume_pred
model
coef(model)
Volume_pred  #예측값
trees$Volume #실제값
trees$Volume - Volume_pred
mtcars
studycase <- data.frame(mtcars)
model <- lm(mpg~., data = studycase)
coef(model)
fitted(model)
plot(studycase, pch=19, col='red')
residuals(model)
coef(model)
summary(model)
deviance(model)
deviance(model) / length( nrow(study) )
deviance(model) / length( nrow(studycase) )
summary(model)
coef(model)
changed_model <- stepAIC(model)
summary(changed_model)
coef(changed_model)
summary(model)
changed_model <- stepAIC(model)
coef(changed_model)
summary(changed_model)
coef(changed_model)
summary(model)
summary(changed_model)
residuals(Volume_pred)
fitted(model)
model <- lm(Volume~., data = df)
fitted(model)
residuals(model)
Volume_pred
fitted(model)
residuals(model)
# (3) (1), (2)에서 만든 예측모델의 설명력(Adjusted R-squared)을 비교하시오.
#
summary(model)
summary(changed_model)
model <- lm(mpg~., data = studycase)
changed_model <- stepAIC(model)
coef(changed_model)
summary(changed_model)
# (3) (1), (2)에서 만든 예측모델의 설명력(Adjusted R-squared)을 비교하시오.
#
summary(model)
summary(changed_model)
# 문3)
# UCLA 대학원의 입학 데이터를 불러와서 mydata에 저장한 후 다음 물음에 답하시오.
#
mydata <- read.csv( "https://stats.idre.ucla.edu/stat/data/binary.csv" )
str(mydata)
model <- glm(admit~., data = mydata)
summary(model)
mtcars
testcase <- mtcars[, c(6,7,9) ]
mtcars
testcase <- mtcars[, c(6,7,9) ]
predict(changed_model, testcase)
str(mydata)
summary(model)
summary(model)
summary(model)
changed_model <- stepAIC(model)
summary(model)
summary(model)
str(mydata)
testcase <- mydata[,c(2:4)]
pred <- predict(model, testcase)
fitted(model)
residuals(model)
pred
fitted(model)
pred
pred <- predict(model, testcase)
pred
pred <- round(pred, 0)
pred
pred <- round(pred, 0)
pred
mydata
str(mydata)
mydata[,1]
pred == mydata$admit
score <- mean(pred == mydata$admit)
score
